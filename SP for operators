1. Arithmatic op
pragma solidity ^0.5.0;
contract SolidityTest {
uint16 public a = 20;
uint16 public b = 10;
uint public sum = a + b;
uint public diff = a - b;
uint public mul = a * b;
uint public div = a / b;
uint public mod = a % b;
uint public dec = --b;
uint public inc = ++a;
}

2. Relational Operator
pragma solidity ^0.5.0;
contract SolidityTest {
uint16 public a = 20;
uint16 public b = 10;
bool public eq = a == b;
bool public noteq = a != b;
bool public gtr = a > b;
bool public les = a < b;
bool public gtreq = a >= b;
bool public leseq = a <= b;
}

3. Logical Operators
pragma solidity ^0.5.0;
contract logicalOperator{
function Logic(
bool a, bool b) public view returns(bool, bool, bool){
bool and = a&&b;
bool or = a||b;
bool not = !a;
return (and, or, not);
}
}

4. Bitwise Operators
pragma solidity ^0.5.0;
contract SolidityTest {
uint16 public a = 20;
uint16 public b = 10;
uint16 public and = a & b;
uint16 public or = a | b;
uint16 public xor = a ^ b;
uint16 public leftshift = a << b;
uint16 public rightshift = a >> b;
uint16 public not = ~a ;
}

5. Assignment Operator
pragma solidity ^0.5.0;
contract SolidityTest {
uint16 public assignment = 20;
uint public assignment_add = 50;
uint public assign_sub = 50;
uint public assign_mul = 10;
uint public assign_div = 50;
uint public assign_mod = 32;
function getResult() public{
assignment_add += 10;
assign_sub -= 20;
assign_mul *= 10;
assign_div /= 10;
assign_mod %= 20;
return ;
}
}

6.Conditional Operators
pragma solidity ^0.5.0;
contract SolidityTest{
function sub(uint a, uint b) 
public view returns(uint){
uint result = (a > b? a-b : b-a);
return result;
}
}
