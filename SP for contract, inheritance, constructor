A. Contract
pragma solidity ^0.5.0;
contract C {
uint private data;
uint public info;
constructor() public {
info = 10;
}
function increment(uint a) private pure returns(uint) { return a + 1; }
function updateData(uint a) public { data = a; }
function getData() public view returns(uint) { return data; }
function compute(uint a, uint b) internal pure returns (uint) { return a + b; }
}
contract E is C {
uint private result; C
private c;
constructor() public {c
= new C();
}
function getComputedResult() public {
result = compute(3, 5);
}
function getResult() public view returns(uint) { return result; }
function getData() public view returns(uint) { return c.info(); }
}

B. Inheritance
pragma solidity >=0.4.22 <0.6.0;
contract parent{
uint internal sum;
setValue() external {uint a =
20;
uint b = 20;
sum = a + b;
}
}
contract child is parent{
function getValue() external view returns(uint) {
return sum;
}
}
contract caller {
child cc = new child();
function testInheritance() public {
cc.setValue();
}
function result() public view returns(uint ){
return cc.getValue();
}
}

C. Constructors
pragma solidity ^0.5.0;
contract Base {
uint data;
constructor(uint _data) public {
data = _data;
}
function getresult()public view returns(uint){
return data;
}
}
contract Derived is Base (5) {
constructor() public {}
}
